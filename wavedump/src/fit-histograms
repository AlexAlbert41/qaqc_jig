#!/usr/bin/env python3
"""
Calculates 511 and SPE charge by fitting ROOT histograms.
Temporarily saves charge data in `temp_data.csv`. This file can be read by `save_charge_data.py` in order to save it to a more permanent and filled out csv file.
"""

from __future__ import print_function, division
import h5py
import numpy as np
import scipy as sp
import sys
import csv
import os
import ROOT
from ROOT import gROOT
from ROOT import TMath

# DEFAULT VALUES FOR SPE FIT:
D_OFFSET = 0
D_LAMBDA = 1
D_SPE_CHARGE = 0.8
D_NOISE_SPREAD = 0.01
D_SPE_CHARGE_SPREAD = 0
D_ZERO_PEAK_SPREAD = 0.4
# Number of peaks we use for SPE fitting
num_peaks = 20

def iqr(h):
    probSum = np.array([0.25, 0.75], dtype=np.double)
    q = np.zeros(2, dtype=np.double)
    h.GetQuantiles(2, q, probSum)
    return q[1] - q[0]

def save_as_csv(data_type, value, value_err, channel):
    """
    Saves charge data in `temp_data.csv`.
    `temp_data.csv` is read by `save_spe_data.py`, which
    organizes the data and saves it to `Fit_Data.csv`.
    """
    with open ('temp_data.csv', 'a') as file:
        headers = [
            'Data Type',
            'Channel',
            'Charge',
            'Err Abs'
            ]
        writer = csv.DictWriter(file, headers)
        if os.stat('temp_data.csv').st_size == 0:
            writer.writeheader()
        writer.writerow({
            'Data Type': data_type,
            'Channel': channel,
            'Charge': value,
            'Err Abs': value_err
        })

def analyze_filter_data(h, f_h):
    """
    Fits the filtered charge histogram `f_h` with a gaussian,
    and gets the mean and standard  deviation of this gaussian: `f_m` and `f_std`.
    
    Then, fits `h` (the unfiltered charge histogram) with a gaussian around `f_m`,
    and gets the mean, standard deviation, and scale of this gaussian: `m`, `std`, `scale`.

    Returns `(m, f_std, std, scale)`

    If `f_h` is passed as `None`, only default values are returned, specified as global constants
    in this module (except for the default scale, which is proportional to the entries in `h`).
    """
    filter_fit = ROOT.TF1('filter_fit', 'gaus', f_h.GetMean() - 2*f_h.GetStdDev(), f_h.GetMean() + 2*f_h.GetStdDev())
    f_h.Fit(filter_fit, 'SRQ0')
    offset = filter_fit.GetParameter(1)
    noise_spread = filter_fit.GetParameter(2)
    
    win = max(0.3, 20*noise_spread)
    raw_fit = ROOT.TF1('raw_fit', 'gaus', offset - win, offset + win)
    raw_fit.SetParameter(1, offset)
    for _ in range(3):
        h.Fit(raw_fit, 'SRQ')
        offset = raw_fit.GetParameter(1)
        raw_fit.SetRange(offset-win, offset+win)
    raw_spread = raw_fit.GetParameter(2)
    scale = raw_fit.GetParameter(0)
    return (offset, noise_spread, raw_spread, scale)

def peaks(h, width=4, height=0.05):
    """
    Finds peaks in hisogram `h`.
    `height` is measured as a fraction of the highest peak.
    Peaks lower than `<highest peak>*height` will not be searched for.
    """
    spec = ROOT.TSpectrum()
    highest_peak = None
    n_pks = spec.Search(h, width, "nobackground", height)               
    x_pos = spec.GetPositionX()
    x_pos = np.array([x_pos[i] for i in range(n_pks)])
    if len(x_pos) != 0:
        highest_peak = x_pos[0]
    ind = np.argsort(x_pos)
    x_pos = x_pos[ind]
    return (x_pos, highest_peak)
    # print(f'All peaks: {x_pos}')
    # x_pos = remove_bad_peaks(h, x_pos, 0.5)
    # print(f'Good peaks: {x_pos}')

def get_bin_num(h, val):
    """
    Gets the bin number of `val` if `val` was placed into the histogram `h`.
    Does NOT add `val` to `h`.
    """
    return h.GetXaxis().FindBin(val)

class poisson_model:
    """
    p[0]: overall scale
    p[1]: offset
    p[2]: mean number of SPEs in integration window
    p[3]: SPE charge
    p[4]: std. of scope/digitizer noise
    p[5]: std. of SPE charge
    """
    def __call__(self, x, p):
        # Original model in root syntax:
        # string = "[0]*(" + "+".join(["TMath::Poisson(%i,[2])*TMath::Gaus(x-[1],[3]*%i,TMath::Sqrt([4]^2+[5]^2*%i))" % (i,i,i) for i in range(0,n)]) + ")"
        
        model = 0
        for i in range(num_peaks):
            model += TMath.Poisson(i, p[2]) * TMath.Gaus(x[0]-p[1], i*p[3], TMath.Sqrt(p[4]**2 + i*(p[5]**2)), False)
        model *= p[0]
        return model

def fac(x):
    """
    factorial
    """
    return np.math.gamma(x+1)

def vinogradov(N, l, ps):
    """
    Returns probability of getting `N` PEs in the integration window. 
    `l` is the mean number of primary PEs.
    `ps` is the probability that a primary PE causes a secondary PE.
    See this paper for a more detailed explanation:
    https://arxiv.org/pdf/2106.13168.pdf
    """
    model = 0
    for i in range(N+1):
        model += B_coeff(i, N) * (l*(1-ps))**i * ps**(N-i)
    model *= np.exp(-l)
    model /= fac(N)
    return model

def B_coeff(i, N):
    """
    Helper function for the vinogradov model.
    """
    if i == 0 and N == 0:
        return 1
    elif i == 0 and N > 0:
        return 0
    else:
        return (fac(N)*fac(N-1)) / (fac(i)*fac(i-1)*fac(N-i))

class vinogradov_model:
    """
    p[0]: overall scale
    p[1]: offset
    p[2]: mean number of SPEs in integration window
    p[3]: SPE charge
    p[4]: std. of scope/digitizer noise
    p[5]: std. of SPE charge
    p[6]: probability that a primary PE triggers a secondary PE (https://arxiv.org/pdf/2106.13168.pdf)
    """
    def __call__(self, x, p):
        model = 0
        for i in range(num_peaks):
            model += vinogradov(i, p[2], p[6]) * TMath.Gaus(x[0]-p[1], i*p[3], TMath.Sqrt(p[4]**2 + i*(p[5]**2)), False)
        model *= p[0]
        return model

def plot_dists():
    """
    Plots the poisson and vinogradov distributions, then exits on user input.
    """
    l = 0.5
    ps = 0.9
    x = np.arange(20)
    y_p = [np.exp(-l) * (l**i)/fac(i) for i in x]
    y_v = [vinogradov(i, l, ps) for i in x]
    print(f'poisson sum: {np.sum(y_p)}')
    print(f'vino sum: {np.sum(y_v)}')
    plt.figure()
    plt.bar(x-0.2, y_p, width=0.4, label='poisson')
    plt.bar(x+0.2, y_v, width=0.4, label='vino')
    plt.legend()
    plt.show()
    input()
    exit()

if __name__ == '__main__':
    from argparse import ArgumentParser
    import matplotlib.pyplot as plt

    parser = ArgumentParser(description='Fit SPE and sodium charge histograms')
    parser.add_argument('filenames',nargs='+',help='input filenames (ROOT format)')
    parser.add_argument('--sodium', default=False, action='store_true', help='flag to indicate data is from a sodium source')
    parser.add_argument('--plot', default=False, action='store_true', help='plot the waveforms and charge integral')
    parser.add_argument('--BV', type=int,default=42, help='Bias Voltage input')
    #parser.add_argument('--peakper', type=double, default=0, help='Direct change of maximum percentage change from maximum peak')
    parser.add_argument('--ObjKeep', type=int,default=2,  help='Number of objects to fit')
    # parser.add_argument('--SPE_FLL', default=-0.1, type=float, help='Left limit on the spe fit')
    # parser.add_argument('--SPE_FLR', default=-0.1, type=float, help='Right limit on the spe fit')
    parser.add_argument('--NA_GF', default=50, type=float, help='Right limit on the spe fit')
    parser.add_argument('--chi2', default=False, action='store_true', help='Save the ndof and chi2 value of the fit to csv')
    parser.add_argument('--root_func', default=False, action='store_true')
    parser.add_argument("--print_pdfs", default=None, type=str, help="Folder to save pdfs in")

    args = parser.parse_args()
    
    if not args.plot:
        # Disables the canvas from ever popping up
        gROOT.SetBatch()
    
    canvas = []
    canvas_count = 1
    if os.path.exists('temp_data.csv'):
        os.remove('temp_data.csv')

    for filename in args.filenames:
        f = ROOT.TFile(filename,"UPDATE")
        keycount=0
        
        # raw is unfiltered
        raw_histograms = {}
        filtered_histograms = {}
        for key in f.GetListOfKeys():
            #print("***KEYPRINT")
            #print(key)
            #print(key.GetTitle())
            if (keycount>0):
                if(key.GetTitle()==keyold.GetTitle()):
                   # print("EQUAL")
                    continue
            keycount+=1
            keyold=key
            #if keycount>2:
            #    break

            #if keycount>args.ObjKeep:# Only gets channel 1
            #    break
                # Argument to delete all previous fits. Not working, related to TF1 class?
                # Each time the code executes 2 new keys are created in the file.
                #h.Reset("ICESM")

            h = key.ReadObj()

            if h.ClassName() != 'TH1F' and h.ClassName() != 'TH1D':
                continue

            if h.GetName().startswith('f_'):
                filtered_histograms[h.GetName()] = h
                keycount -= 1
            else:
                raw_histograms[h.GetName()] = (h, keycount)
        
        for histogram in raw_histograms:
            h = raw_histograms[histogram][0]
            keycount = raw_histograms[histogram][1]
            

            print(h.GetName())
            if args.sodium:
                # Peak searching using the TSpectrum class. See ROOT
                # documentation for details.
                # https://root.cern.ch/root/htmldoc/guides/spectrum/Spectrum.html#processing-and-visualization-functions

                # *** depending on the overvoltage the peak dimension with respect to the noise makes changes needed on the second value. A more efficient way would be to create a bisection and stop it when it detects only the 2 biggest peaks.
                #The number of found peaks and their positions are written into the members fNpeaks and fPositionX
                #Search 	( 	const TH1 *  	hin,
	        #Double_t  	sigma = 2,
		#Option_t *  	option = "",
		#Double_t  	threshold = 0.05 #Peaks with  amplitude < th*Amax are discarded. If too small -> detects peaks after the 511 peak. The code right now detects the last peak (that doesn't have a huge width) as the 511 peak. Other option is to iterate through the y positions and keep always the latest peak with an increase over the previous ones? first derivative with respect to max/min closest to zero 	
                h.GetListOfFunctions().Clear()
                spec = ROOT.TSpectrum()
                if(args.BV==42):
                    n_pks = spec.Search(h, 1, "", 0.01)
                    #n_pks = spec.Search(h, 1, "", 0.999)
                elif(args.BV>42):
                    n_pks = spec.Search(h, 1, "", 0.005)
                else:
                    # print("Wrong BV<42")
                    sys.exit("Wrong BV<42")


                x_pos = spec.GetPositionX()
                y_pos = spec.GetPositionY()

                x_pos = np.array([x_pos[i] for i in range(n_pks)])
                y_pos = np.array([y_pos[i] for i in range(n_pks)])
                print("Peak charge full list:")
                print(x_pos)
                ind = np.argsort(x_pos)
                x_pos = x_pos[ind]
                y_pos = y_pos[ind]
                                      
                n = len(x_pos)
                
                # peak = x_pos[-1]
               
                f1 = None
                win = 0.3 * h.GetStdDev()
                for i in range(n-1, -1, -1):
                    peak = x_pos[i]
                    if peak < x_pos[0] + 0.01*h.GetStdDev():
                        continue
                    print(f'Fitting this peak! {peak}')
                    f1 = ROOT.TF1("f1","gaus", peak-win, peak+win)
                    r = h.Fit(f1, 'ILMSR+')
                    r = r.Get()
                    if not r.IsValid():
                        continue
                    if f1.GetParameter(0) > h.GetEntries() / 200:
                        break
                if f1 == None:
                    peak = x_pos[-1]
                    f1 = ROOT.TF1("f1","gaus", peak-win, peak+win)
                    h.Fit(f1, 'ILMSR+')


                #*** Store values in txt/csv file
                print("511 peak = %.4f +/- %.4f" % (f1.GetParameter(1), f1.GetParError(1)))
                save_as_csv('sodium', f1.GetParameter(1), f1.GetParError(1), h.GetName())

                h.Write()
                if args.pdf:
                    print("*** Print PDF 1:")
                    canvas.append(ROOT.TCanvas("c%i" % canvas_count))
                    canvas_count += 1
                    h.Draw()
                    canvas[-1].Update()
                    root, ext = os.path.splitext(filename)
                    canvas[-1].Print(os.path.join(args.print_pdfs, f"{root}_Key_{keycount}.pdf"))
                elif args.plot:
                    canvas.append(ROOT.TCanvas("c%i" % canvas_count))
                    canvas_count += 1
                    h.Draw()
                    canvas[-1].Update()
            else:
                print("Single P.h.e:")
                string = "[0]*(" + "+".join(["TMath::Poisson(%i,[2])*TMath::Gaus(x-[1],[3]*%i,TMath::Sqrt([4]^2+[5]^2*%i))" % (i,i,i) for i in range(0,n)]) + ")"

                #string = "+".join(["gaus(%i)" % i for i in range(0,n*3,3)])

                # print("Using the following fit string: '%s'" % string)
                # *** we could set a threshold/break to find when the Y axis /charge goes above a certain values from the smallest X to set the first value (-0.4 as of the time of this comment)
                if args.root_func: 
                    f1 = ROOT.TF1("f1", string, h.GetMean() - 2 * h.GetStdDev(), h.GetMean() + 4 * h.GetStdDev())
                else:
                    # declaring `model` here is necessary - passing `vinogradov_mode()` as an argument directly won't work.
                    model = vinogradov_model()
                    f1 = ROOT.TF1("f1", model, h.GetMean() - 2 * h.GetStdDev(), h.GetMean() + 4 * h.GetStdDev(), 7)
                    f1.FixParameter(6, 0)
               
                if f'f_{h.GetName()}' in filtered_histograms:
                    print('Using filtered data!')
                    offset, noise_spread, raw_spread, scale = analyze_filter_data(h, filtered_histograms[f'f_{h.GetName()}'])
                else:
                    offset = D_OFFSET
                    noise_spread = D_NOISE_SPREAD
                    raw_spread = D_ZERO_PEAK_SPREAD
                    scale = h.GetEntries()*0.075

                # `l`, short for lambda, which is the average number of PEs measured in the integration window.
                zero_peak_end = offset + 2 * raw_spread
                print(f'zero_peak_end: {zero_peak_end}')
                num_zero = h.Integral(0, get_bin_num(h, zero_peak_end))
                prob_zero = num_zero / h.GetEntries()
                l = -np.log(prob_zero)
                num_peaks = max(20, min(2, sp.stats.poisson.ppf(0.95, l)))
                
                # SPE Charge estimated using the method from this forum:
                # https://math.stackexchange.com/questions/3689141/calculating-the-mean-and-standard-deviation-of-a-gaussian-mixture-model-of-two-c
                SPE_charge = h.GetMean()
                SPE_charge -= offset * sum([vinogradov(i, l, f1.GetParameter(6)) for i in range(n)])
                SPE_charge /= sum([vinogradov(i, l, f1.GetParameter(6)) * i for i in range(n)])
                SPE_charge = min(4, SPE_charge)
                SPE_charge = max(zero_peak_end - offset, SPE_charge)

                f1.SetRange(offset - 1.5*raw_spread, offset + 5*h.GetStdDev())
                
                f1.FixParameter(0, scale)
                # f1.SetParameter(0, scale)
                # f1.SetParLimits(0, scale*0.1, scale * 100)
                
                f1.FixParameter(1, offset)
                
                f1.SetParameter(2, l)
                
                f1.SetParameter(3, SPE_charge)
                f1.SetParLimits(3, zero_peak_end - offset, SPE_charge + 1)
                
                f1.FixParameter(4, raw_spread)
                
                f1.FixParameter(5, D_SPE_CHARGE_SPREAD)
                
                # The following indented block is code older than June 2022
                    # if len(x_pos) >= 1:
                    #     if len(x_pos) == 1:
                    #         f1.FixParameter(1, float(x_pos))  
                    #         f1.SetRange(f1.GetParameter(1) - h.GetStdDev() * 0.5, f1.GetXmax()) 
                    #     else:
                    #         f1.FixParameter(1, float(x_pos[0]))  
                    #         f1.SetRange(f1.GetParameter(1) - h.GetStdDev() * 0.5, float(x_pos[-1]) + h.GetStdDev() * 0.5) 
                    # if len(x_pos) > 1:
                    #     found_SPE_peak = True
                    #     f1.FixParameter(3, float(x_pos[1]) - f1.GetParameter(1))
                    # if not found_SPE_peak:
                    #     f1.SetParameter(3,0.8)                
                    #     f1.SetParLimits(3,0.1,5.)
                    # if len(x_pos) == 0:
                    #     f1.SetParameter(1, -0.08)
                    #     f1.SetParLimits(1,-1,1)

                    #for j, i in enumerate(range(0,n*3,3)):
                    #    print(i)
                    #    f1.SetParameter(i,y_pos[j])
                    #    f1.SetParameter(i+1,x_pos[j])
                    #    f1.FixParameter(i+1,x_pos[j])
                    #    f1.SetParameter(i+2,0.02)
                    #    f1.FixParameter(i+2,0.02)

                    #r = h.Fit(f1, 'ILMSRN+')
                
                for i in range(6):
                    print(f'[{i}]: {f1.GetParameter(i)}')
                
                r = h.Fit(f1, 'SRB+')

                for i in range(7):
                    f1.ReleaseParameter(i) 
                f1.FixParameter(1, f1.GetParameter(1)) 
                f1.FixParameter(4, f1.GetParameter(4)) 
                # f1.SetParLimits(1, f1.GetParameter(1) - 0.1, f1.GetParameter(1) + 0.1) 
                f1.SetParLimits(2, max(0, f1.GetParameter(2) - 1), f1.GetParameter(2) + 1) 
                f1.SetParLimits(3, max(zero_peak_end-offset, f1.GetParameter(3) - 1), f1.GetParameter(3) + 1) 
                # f1.SetParLimits(4, 0, f1.GetParameter(4) + 0.5) 
                f1.SetParLimits(5, 0, f1.GetParameter(5) + 0.1) 
                f1.SetParLimits(6, 0, 0.25) 
                
                f1.SetLineColor(3)
                r = h.Fit(f1, 'SR+')
                r = r.Get()
                if not r.IsValid():
                    print("Fit error!")
                
                # Older than June 2022
                    #*** Store parameter p3 in csv/txt + print in screen only that one to avoid errors 
                    
                    #for j, i in enumerate(range(0,n*3,3)):
                    #    print(i)
                    #    f1.ReleaseParameter(i)
                    #    f1.ReleaseParameter(i+1)
                    #    f1.ReleaseParameter(i+2)

                    #r = h.Fit(f1, 'ILMSR+')
                    
                    #print("peak 1 = %.4f +/- %.4f" % (f1.GetParameter(1), f1.GetParError(1)))
                    #if n > 1:
                    #    print("peak 2 = %.4f +/- %.4f" % (f1.GetParameter(4), f1.GetParError(4)))
                
                if args.chi2:
                    with open('chi2_fit_data.csv', 'a') as csv_file:
                        headers = [
                            'channel',
                            'ndof',
                            'chi2',
                            'prob',
                            'filename'
                        ]
                        writer = csv.DictWriter(csv_file, headers)
                        if os.stat('chi2_fit_data.csv').st_size == 0:
                            writer.writeheader()
                        writer.writerow({
                            'channel': h.GetName(),
                            'ndof': f1.GetNDF(),
                            'chi2': f1.GetChisquare(),
                            'prob': f1.GetProb(),
                            'filename': filename
                        })
                        print(f1.GetProb())
                        print(f1.GetChisquare())
                
                save_as_csv('SPE', f1.GetParameter(3), f1.GetParError(3), h.GetName())

                h.SetAxisRange(-4, 6, "X")
                h.SetAxisRange(0, h.GetBinContent(h.GetMaximumBin())+h.GetEntries()*0.0025, "Y")
                h.Write()
                filtered_histograms[f'f_{h.GetName()}'].Write()

                if args.plot:
                    canvas.append(ROOT.TCanvas("c%i" % canvas_count))
                    canvas_count += 1
                    h.Draw()
                    canvas[-1].Update()
                if args.pdf:
                    print("***Print to PDF 2:")
                    canvas.append(ROOT.TCanvas("c%i" % canvas_count))
                    canvas_count += 1
                    h.Draw()
                    canvas[-1].Update()
                    root, ext = os.path.splitext(filename)
                    canvas[-1].Print(os.path.join(args.print_pdfs, f"{root}_Key_{keycount}.pdf"))
        if args.plot:
            input()
        f.Close()
