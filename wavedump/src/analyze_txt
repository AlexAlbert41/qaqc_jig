#!/usr/bin/env python3
from __future__ import print_function, division
import h5py
import numpy as np
import pandas as pd
from scipy import signal

def iqr(x):
    return np.percentile(x,75) - np.percentile(x,25)


def integrate(x, data, a, b):
    """
    Integrate all waveforms in `data` with times `x`.
    """
    
    # i = v/r
    # divide by 50 ohms to convert to a charge
    return -np.trapz(data[:,a:b],x=x[a:b])*1000/50.0

def get_bins(x):
    """
    Returns bins for the data `x` using the Freedman Diaconis rule. See
    https://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule.
    
    The equation below returns bins using said rule. A smaller bin value than this was chosen after finetuning for better fitting results.
    bin_width = 2*iqr(x)/(len(x)**(1/3.0))
    """
    
    bin_width = 0.5*iqr(x)/(len(x)**(1/3.0))
    if bin_width == 0:
        print('Zero bin width! Making it 0.0001.')
        bin_width = 0.0001
    return np.arange(np.min(x),np.max(x),bin_width)

def chunks(lst, n):
    """Yield successive n-sized chunks from lst."""
    for i in range(0, len(lst), n):
        yield (i,i + n)

def convert_data(f, channel, start, stop):
    pass

def low_filter_SPE(time, y):
    filter_order = 2
    nyquist = (0.5 * (time[1] - time[0]))**(-1)
    cutoff = 5**(-1)
    b, a = signal.butter(filter_order, min(1, cutoff/nyquist), btype='lowpass', output='ba')
    filter_data = signal.lfilter(b, a, y)
    return filter_data

def high_filter_SPE(time, y):
    filter_order = 2
    nyquist = (0.5 * (time[1] - time[0]))**(-1)
    cutoff = 5**(-1)  # Cut off frequency for the filter measured in inverse nanoseconds
    b, a = signal.butter(filter_order, min(1, cutoff/nyquist), btype='highpass', output='ba')
    # sos = signal.butter(filter_order, min(1, cutoff/nyquist), btype='highpass', output='sos')
    filter_data = signal.lfilter(b, a, y)
    return filter_data

if __name__ == '__main__':
    from argparse import ArgumentParser
    import ROOT
    import matplotlib.pyplot as plt

    parser = ArgumentParser(description='Analyze data from the Agilent scope')
    parser.add_argument('filenames',nargs='+',help='input filenames (hdf5 format)')
    parser.add_argument('-o','--output', default=None, help='output file name', required=True)
    parser.add_argument('--sodium', default=False, action='store_true', help='flag to indicate data is from a sodium source')
    parser.add_argument('--laser', default=False, action='store_true', help='flag to indicate data is from a laser source')
    parser.add_argument('--plot', default=False, action='store_true', help='plot the waveforms and charge integral')
    parser.add_argument('--chunks', default=10000, type=int, help='number of waveforms to process at a time')
    parser.add_argument('--pdf', default=False, action='store_true', help='prints pdfs')
    parser.add_argument('--IT', default=300, type=float, help='integration time for SPE analysis')
    parser.add_argument('--r', default=50, type=float, help='time between upper bound of SPE analysis and lower bound of 511 analysis')

    args = parser.parse_args()

    charge = {}
    f_charge = {}
    average = {}
    std = {}
    show_channel = 'ch0'
    for filename in args.filenames:
        with open(filename) as f:
            channel = show_channel
            y = []
            outbreak = False
            for i in range(10000):
                trial = []
                for j in range(1024):
                    x = f.readline()
                    if x == '':
                        outbreak = True
                        break
                    trial.append(float(x.strip()))
                if outbreak:
                    break
                y.append(trial)
            y = np.array(y) * (1/2**12)
            x = np.arange(1024)
            
            if args.sodium:
                # a, b = get_window(x,y,left=50,right=300)
                y -= np.median(y[:,x < x[0] + 100],axis=-1)[:,np.newaxis]
                if channel in charge:
                    charge[channel] = np.concatenate((charge[channel],integrate(x,y, a, b)))
                else:
                    charge[channel] = integrate(x,y, a, b)
            else:
                # FIXME remove comments here when done testing
                a = 100
                b = 800
                # b= get_window(x,y,left=50,right=300)[0]
                # a, b = get_spe_window(x, b, integration_time=args.IT, rewind=args.r)
                y -= np.median(y[:,x < x[0] + 100])
                # y -= np.median(y, axis=-1)[:, np.newaxis]
                low_filter_y = low_filter_SPE(x, y)
                high_filter_y = high_filter_SPE(x, y)
                no_SPE_trials = np.min(y[:, x < x[0] + 100], axis=-1) > -5 * iqr(high_filter_y[:, np.logical_and(x >= x[0], x < x[0] + 100)].flatten())
                # y -= np.median(y[no_SPE_trials][:,x < x[0] + 100])
                # FIXME
                # rmv = []
                # for i in range(len(y)):
                #     if np.mean(y[i]) > 0.005:
                #         print(f"{i}/{len(y)}: {np.mean(y[i])}")
                #         print(y[i])
                #         rmv.append(i)
                # y = np.delete(y, rmv, axis=0)
                if channel in charge:
                    charge[channel] = np.concatenate((charge[channel],integrate(x,y, a, b)))
                    f_charge[channel] = np.concatenate((f_charge[channel], integrate(x, high_filter_y, a, b))) 
                    average[channel] = np.concatenate((average[channel], np.median(y, axis=-1))) 
                    std[channel] = np.concatenate((std[channel], np.std(y, axis=-1)))
                else:
                    charge[channel] = integrate(x,y, a, b)
                    f_charge[channel] = integrate(x, high_filter_y, a, b)
                    average[channel] = np.median(y, axis=-1)
                    std[channel] = np.std(y, axis=-1)
                
            if True: # (show_channel == channel or 'base_' + show_channel == channel) and (args.plot or args.pdf):
                plt.figure()
                plt.subplot(2,1,1)
                print(np.shape(y))
                plt.plot(x,y[:500].T)
                plt.xlabel("Time (ns)")
                plt.ylabel("Voltage (V)")
                plt.axvline(x[a])
                plt.axvline(x[b])
                plt.subplot(2,1,2)
                plt.plot(x,np.median(y,axis=0))
                plt.xlabel("Time (ns)")
                plt.ylabel("Voltage (V)")
                plt.axvline(x[a])
                plt.axvline(x[b])
                plt.suptitle(channel)
            if args.pdf:
                prname=filename[:len(filename)-5]
                #print("PDF printing")
                plt.savefig("./FiguresAnalysis/"+prname+"_"+str(channel)+"_TimeVolt"+".pdf")
            
            # Plotting the filtered voltage signal. Doesn't have to be included in the final draft of this code.
            if (show_channel == channel or 'base_' + show_channel == channel) and (args.plot or args.pdf):
                plt.figure()
                plt.subplot(2,1,1)
                plt.plot(x,high_filter_y[:100].T)
                plt.xlabel("Time (ns)")
                plt.ylabel("Voltage (V)")
                plt.axvline(x[a])
                plt.axvline(x[b])
                plt.subplot(2,1,2)
                plt.plot(x,np.median(low_filter_y,axis=0))
                plt.xlabel("Time (ns)")
                plt.ylabel("Voltage (V)")
                plt.axvline(x[a])
                plt.axvline(x[b])
                plt.suptitle(channel)

    f = ROOT.TFile(args.output,"recreate")
    for channel in charge:
        # FIXME
        if channel != show_channel: continue
        good = []
        for x in charge[channel]:
            if x > -20 and x < 20:
                good.append(x)
        bins = get_bins(good)
        
        # bins = get_bins(charge[channel])
        h = ROOT.TH1D(channel,"Charge Integral for %s" % channel,len(bins),bins[0],bins[-1])
        for x in charge[channel]:
            h.Fill(x)
        h.GetXaxis().SetTitle("Charge (pC)")
        
        if show_channel == channel and (args.plot or args.pdf):
            plt.figure()
            # plt.hist(charge[channel],bins=bins,histtype='step',label=channel)
            plt.hist(good,bins=bins,histtype='step',label=channel)
            
            plt.xlabel("Charge (pC)")
            plt.legend()
        if args.pdf:
            #print("PDF printing")
            #print("FILENAME:")
            #print(filename[1:10])
            #print(len(filename))
            #figname=filename[:len[filename]-6]
            prname=filename[:len(filename)-5]
            plt.savefig("./FiguresAnalysis/"+prname+"_"+str(channel)+".pdf")
        h.Write()

    # The prefix `f_` will be used to denote objects that correspond to filtered data.
    # f_f = ROOT.TFile('filtered_charge_data.root', 'recreate')
        # FIXME
        good = []
        for x in f_charge[channel]:
            if x > -20 and x < 20:
                good.append(x)
        f_bins = get_bins(good)
        # f_bins = get_bins(f_charge[channel])
        f_h = ROOT.TH1D(f'f_{channel}', "Filtered Charge Integral for %s" % channel, len(f_bins), f_bins[0], f_bins[-1])
        for x in f_charge[channel]:
            f_h.Fill(x)
        f_h.GetXaxis().SetTitle('Charge (pC)')
        # if show_channel == channel and (args.plot or args.pdf):
        #     plt.figure()
        #     # plt.hist(f_charge[channel],bins=f_bins,histtype='step',label='f_'+channel)
        #     plt.hist(good,bins=f_bins,histtype='step',label='f_'+channel)
        #     
        #     plt.xlabel("Charge (pC)")
        #     plt.legend()
        f_h.Write()
        
        # FIXME
        plt.figure()
        bins = get_bins(average[channel]) 
        plt.hist(average[channel],bins=bins,histtype='step',label='avg_'+channel)
        plt.legend()
        # FIXME
        plt.figure()
        plt.plot(np.arange(len(average[channel])), average[channel], label='avg_'+channel)
        plt.legend()
        num = 0
        for x in average[channel]:
            if x <= -35:
                num += 1
        print(f'num: {num}')
        # FIXME
        plt.figure()
        bins = get_bins(std[channel])
        plt.hist(std[channel],bins=bins,histtype='step',label='std_'+channel)
        plt.legend()
        # FIXME
        print(len(std[channel]))
        plt.figure()
        plt.plot(np.arange(len(std[channel])), std[channel], label='std_'+channel)
        plt.legend()

    f.Close()

    if args.plot:
        plt.show()
