#!/usr/bin/env python3
from client import Client
import tkinter as tk
from tkinter import ttk
import random

DEBUG = True

ASSEMBLY_CENTERS = [
    "Caltech",
    "UVA",
    "Milano",
    "CERN"
]

NUMBER_OF_MODULES = [str(i) for i in range(1,13)]
NUMBER_OF_BOARDS = [str(i) for i in range(1,5)]

board_addresses = {
    0: [0,1],
    1: [2,3],
    2: [4,5],
    3: [6,7],
}

relays = [0,1,2,3,4,5]

def take_data():
    n_boards = int(n_boards_var.get())
    
    client = Client()

    # First, we try to get the stepper to the home position
    if stepper_enable.get():
        print("sending command step_home")
        try:
            client.query("step_home")
        except Exception as e:
            entry.delete(0,tk.END)
            entry.insert(0,str(e))
            return

    # Next, we take the single PE data
    try:
        client.query("set_attenuation off")
    except Exception as e:
        entry.delete(0,tk.END)
        entry.insert(0,str(e))
        return

    # First, make sure all the HV relays are off
    for i in range(n_boards):
        for bus in board_addresses[i]:
            for k in relays:
                try:
                    client.query("hv_write %i %i off" % (bus, k))
                except Exception as e:
                    entry.delete(0,tk.END)
                    entry.insert(0,str(e))

    files = []
    # Now, we turn them on one by one and take data
    for i in range(n_boards):
        for k in relays:
            for bus in board_addresses[i]:
                try:
                    client.query("hv_write %i %i on" % (bus, k))
                except Exception as e:
                    entry.delete(0,tk.END)
                    entry.insert(0,str(e))
            # Turn the attenuation off to take SPE data
            try:
                client.query("set_attenuation off")
            except Exception as e:
                entry.delete(0,tk.END)
                entry.insert(0,str(e))
                return
            barcode = barcodes[i*4 + k//2].get()
            if barcode == '':
                entry.delete(0,tk.END)
                entry.insert(0,'Need to enter a barcode for module %i' % (i*4 + k//2 + 1))
                return
                
            filename = 'module_%i.hdf5' % barcode
            # Now, we take data
            if k % 2 == 0:
                starting_channel = 0
            else:
                starting_channel = 16
            p = Popen(['wavedump','-b',barcode,'-v',hv_menu_entry.get(),'-t','software','-l','spe','--starting-channel',starting_channel,'-n',100000,filename])
            p.wait()
            # Turn the attenuation on to take sodium data
            try:
                client.query("set_attenuation off")
            except Exception as e:
                entry.delete(0,tk.END)
                entry.insert(0,str(e))
                return
            p = Popen(['wavedump','-b',barcode,'-v',hv_menu_entry.get(),'-t','self','-l','sodium','--starting-channel',starting_channel,'-n',100000,filename])
            p.wait()
            files.append(filename)

    # Now, we analyze the files
    for filename in filenames:
        root, ext = splitext(filename)
        root_filename = "%s.root" % root
        p = Popen(['analyze-waveforms',filename,'-o', root_filename, '-u', '-i', assembly_center.get()])
        p.wait()

def poll():
    client = Client()

    n_boards = int(n_boards_var.get())

    print("n_boards = ", n_boards)
    
    # First, make sure all the HV relays are off
    for i in range(n_boards):
        for bus in board_addresses[i]:
            for k in range(3):
                # k number of module in board bus
                if not DEBUG:
                    try:
                        thermistor_value = client.query("thermistor_read %i %i" % (bus, k))
                    except Exception as e:
                        entry.delete(0,tk.END)
                        entry.insert(0,str(e))
                        return
                    try:
                        tec_value = client.query("tec_check %i %i" % (bus, k))
                    except Exception as e:
                        entry.delete(0,tk.END)
                        entry.insert(0,str(e))
                        return
                else:
                    thermistor_value = random.uniform(20,30)
                    tec_value = random.uniform(20,30)

                n = (bus//2)*3 + k
                if bus % 2 == 0:
                    thermistor_text[(n,'a')].config(text="%.2f" % thermistor_value)
                    thermistor_text[(n,'tec_a')].config(text="%.2f" % tec_value)
                else:
                    thermistor_text[(n,'b')].config(text="%.2f" % thermistor_value)
                    thermistor_text[(n,'tec_b')].config(text="%.2f" % tec_value)

def step_home():
    client = Client()
    try:
        client.query("step_home")
    except Exception as e:
        entry.delete(0,tk.END)
        entry.insert(0,str(e))
        return

window = tk.Tk()

frame_main = tk.Frame(window)
frame_config = tk.Frame(window)
frame_main.pack(side=tk.LEFT)
frame_config.pack(side=tk.RIGHT)

tab = ttk.Notebook(frame_main)
tab1 = ttk.Frame(tab)
tab2 = ttk.Frame(tab)
tab.add(tab1,text="Normal")
tab.add(tab2,text="Advanced")
tab.pack(expand=1,fill='both')

frame_menu = tk.Frame(tab1)
frame_settings = tk.Frame(tab1)
frame_log = tk.Frame(frame_config)
frame_buttons = tk.Frame(tab1)
frame_barcodes = tk.Frame(frame_config)
frame_thermistor = tk.Frame(tab2)
frame_adv_buttons = tk.Frame(tab2)

tk.Label(frame_thermistor,text="Thermistor A (C)").grid(row=0,column=1)
tk.Label(frame_thermistor,text="Thermistor B (C)").grid(row=0,column=2)
tk.Label(frame_thermistor,text="TEC A (Ohms)").grid(row=0,column=3)
tk.Label(frame_thermistor,text="TEC B (Ohms)").grid(row=0,column=4)
thermistor_labels = {}
thermistor_text = {}
for i in range(12):
    thermistor_labels[i] = tk.Label(frame_thermistor,text="Barcode %i: " % i)
    thermistor_labels[i].grid(row=i+1,column=0)
    thermistor_text[(i,'a')] = tk.Label(frame_thermistor,text="")
    thermistor_text[(i,'a')].grid(row=i+1,column=1)
    thermistor_text[(i,'b')] = tk.Label(frame_thermistor,text="")
    thermistor_text[(i,'b')].grid(row=i+1,column=2)
    thermistor_text[(i,'tec_a')] = tk.Label(frame_thermistor,text="")
    thermistor_text[(i,'tec_a')].grid(row=i+1,column=3)
    thermistor_text[(i,'tec_b')] = tk.Label(frame_thermistor,text="")
    thermistor_text[(i,'tec_b')].grid(row=i+1,column=4)

button_poll = tk.Button(master=frame_adv_buttons,text="Poll", width=25, height=5, command=poll)
button_poll.pack()

entry = tk.Entry(master=frame_log,width=50)
entry.pack()

button_home = tk.Button(master=frame_buttons,text="Stepper Home", width=25, height=5, command=step_home)
button_home.pack()

button = tk.Button(master=frame_buttons,text="Take Data", width=25, height=5, command=take_data)
button.pack()

assembly_center = tk.StringVar(frame_menu)
assembly_center.set(ASSEMBLY_CENTERS[0])

barcode_labels = []
barcodes = []
barcode_entries = []
module_available = []
module_checkbox = []
for i in range(12):
    barcode_labels.append(tk.Label(frame_barcodes,text="Barcode %i: " % i))
    barcode_labels[-1].grid(row=i,column=0)
    barcodes.append(tk.StringVar(frame_menu))
    barcode_entries.append(tk.Entry(frame_barcodes,textvariable=barcodes[-1]))
    barcode_entries[-1].grid(row=i,column=1)
    module_available.append(tk.IntVar(frame_barcodes, value=1))
    checkbox = tk.Checkbutton(frame_barcodes, text='Present', variable=module_available[-1], onvalue=1, offvalue=0)
    module_checkbox.append(checkbox)
    checkbox.grid(row=i,column=2)

for i in range(11):
    barcode_entries[i].bind('<Return>', lambda x, i=i: barcode_entries[i+1].focus())

assembly_center_label = tk.Label(frame_menu,text="Assembly Center: ")
assembly_center_label.grid(row=0,column=0)

assembly_center_menu = tk.OptionMenu(frame_menu, assembly_center, *ASSEMBLY_CENTERS)
assembly_center_menu.grid(row=0,column=1)

n_boards_label = tk.Label(frame_menu,text="Number of Boards: ")
n_boards_label.grid(row=2,column=0)

n_boards_var = tk.StringVar(frame_menu)
n_boards_var.set(NUMBER_OF_BOARDS[3])

def n_boards_changed(*args):
    for i in range(4):
        if i + 1 <= int(n_boards_var.get()):
            module_checkbox[i*3].configure(state=tk.NORMAL)
            module_checkbox[i*3+1].configure(state=tk.NORMAL)
            module_checkbox[i*3+2].configure(state=tk.NORMAL)
        else:
            module_checkbox[i*3].configure(state=tk.DISABLED)
            module_checkbox[i*3+1].configure(state=tk.DISABLED)
            module_checkbox[i*3+2].configure(state=tk.DISABLED)
            module_available[i*3].set(0)
            module_available[i*3+1].set(0)
            module_available[i*3+2].set(0)

n_boards_menu = tk.OptionMenu(frame_menu, n_boards_var, *NUMBER_OF_BOARDS, command=n_boards_changed)
n_boards_menu.grid(row=2,column=1)

n_boards_changed()

hv_menu_label = tk.Label(frame_menu, text="HV (V): ")
hv_menu_label.grid(row=3,column=0)
hv_menu_entry = tk.Entry(frame_menu)
hv_menu_entry.grid(row=3,column=1)

stepper_enable = tk.IntVar(frame_settings, value=1)
stepper_enable_checkbox = tk.Checkbutton(frame_settings, text='Enable Stepper', variable=stepper_enable, onvalue=1, offvalue=0)
stepper_enable_checkbox.pack()

frame_menu.grid(row=0,column=0)
frame_settings.grid(row=0,column=1)
frame_log.pack()
frame_buttons.grid(row=1,column=1)
frame_barcodes.pack()
frame_thermistor.grid(row=0,column=0)
frame_adv_buttons.grid(row=1,column=0)

window.mainloop()
